name: 构建并发布 Docker 镜像

on:
  push:
    branches: [main]
    paths: [Dockerfile, pyproject.toml, requirements.txt, 'src/eodo/**']
  workflow_dispatch:
    inputs:
      version:
        description: '请输入版本号（如 2.1.0），留空则使用 latest'
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: mayflydestiny/edgeone-dogroup

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      full-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: 生成元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: latest=false
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'push' }}
            type=raw,value=v${{ inputs.version }},enable=${{ inputs.version != '' }}

      - name: 构建单平台镜像（用于测试）
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: local-test:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 导出镜像为 tar
        run: |
          mkdir -p /tmp/image
          docker save local-test:latest | gzip > /tmp/image/local-test.tar.gz

      - name: 上传镜像 artifact
        uses: actions/upload-artifact@v4
        with:
          name: local-test-image
          path: /tmp/image/local-test.tar.gz

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 下载镜像 artifact
        uses: actions/download-artifact@v4
        with:
          name: local-test-image
          path: /tmp/image

      - name: 导入镜像
        run: |
          gzip -d /tmp/image/local-test.tar.gz
          docker load -i /tmp/image/local-test.tar

      - name: 测试镜像（不挂载配置目录）
        run: |
          docker run --rm -d --name test-container \
            -p 54321:54321 \
            local-test:latest

          sleep 10
          curl -f http://localhost:54321/api/status || exit 1
          docker stop test-container

      - name: 通知成功
        if: success()
        run: |
          echo "✅ Docker 镜像构建并测试成功！"
          echo "📦 镜像：${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🏷️ 标签：${{ needs.build.outputs.full-tag }}"

      - name: 通知失败
        if: failure()
        run: |
          echo "❌ Docker 镜像测试失败，不会上传！"
          exit 1

  push:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: needs.test.result == 'success'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置多平台 Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          platforms: linux/amd64,linux/arm64

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 构建并推送多平台镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ needs.build.outputs.full-tag }}
          labels: ${{ needs.build.outputs.full-tag }}
          cache-from: type=gha

      - name: 推送成功通知
        run: |
          echo "🚀 镜像已成功推送！"
          echo "🔗 地址：${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🏷️ 标签：${{ needs.build.outputs.full-tag }}"