# .github/workflows/docker-publish.yml
name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'pyproject.toml'
      - 'requirements.txt'
      - 'src/eodo/app.py'
      - 'src/eodo/static/index.html'

  workflow_dispatch:
    inputs:
      version:
        description: '请手动输入版本号（如 2.1.0），留空则仅打 latest'
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: mayflydestiny/edgeone-dogroup

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: latest=false
          tags: |
            type=raw,value=latest,enable=${{ github.event_name == 'push' }}
            type=raw,value=v${{ inputs.version }},enable=${{ inputs.version != '' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container \
            -p 54321:54321 \
            -v /tmp/test-config:/eodo \
            mayflydestiny/edgeone-dogroup:latest

          # 等待容器启动
          sleep 10

          # 测试应用是否正常响应
          curl -f http://localhost:54321/api/status || exit 1

          # 清理测试容器
          docker stop test-container

      - name: 通知成功
        if: success()
        run: |
          echo "✅ Docker 镜像构建并测试成功！"
          echo "📦 镜像：mayflydestiny/edgeone-dogroup"
          echo "🏷️ 标签：${{ needs.build-and-push.outputs.tags }}"

      - name: 通知失败
        if: failure()
        run: |
          echo "❌ Docker 镜像构建或测试失败！"
          exit 1